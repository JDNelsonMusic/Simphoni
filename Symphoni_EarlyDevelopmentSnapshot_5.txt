symphoni/
├── app/
│   ├── __init__.py
# app/__init__.py
from flask import Flask
from flask_wtf import CSRFProtect
from .extensions import db, migrate, login_manager, session
from .celery_app import make_celery, celery
import os
import logging
from logging.handlers import RotatingFileHandler

def create_app():
    app = Flask(__name__)
    app.config.from_object('config.Config')  # Ensure this path is correct

    # Initialize extensions with app
    db.init_app(app)
    migrate.init_app(app, db)
    login_manager.init_app(app)
    session.init_app(app)  # Initialize Flask-Session
    csrf = CSRFProtect(app)

    # Initialize Celery with app context
    make_celery(app)  # This configures the celery instance

    # Register Blueprints
    from app.routes.main import main_bp
    from app.routes.auth import auth_bp
    from app.routes.conversation import conversation_bp

    app.register_blueprint(main_bp)
    app.register_blueprint(auth_bp)
    app.register_blueprint(conversation_bp)

    # Import models to ensure they are registered
    with app.app_context():
        from . import models

    # Define user_loader here to avoid circular imports
    @login_manager.user_loader
    def load_user(user_id):
        from .models import User  # Import inside function to prevent circular import
        return User.query.get(int(user_id))

    # Set up logging
    if not app.debug and not app.testing:
        if not os.path.exists('logs'):
            os.mkdir('logs')
        file_handler = RotatingFileHandler('logs/symphoni.log', maxBytes=10240, backupCount=10)
        file_handler.setFormatter(
            logging.Formatter('%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]')
        )
        file_handler.setLevel(logging.INFO)
        app.logger.addHandler(file_handler)

        app.logger.setLevel(logging.INFO)
        app.logger.info('Symphoni startup')

    # Add context processor to make 'enumerate' available in all templates
    @app.context_processor
    def utility_processor():
        return dict(enumerate=enumerate)

    return app

│   ├── models.py
# app/models.py

from flask_login import UserMixin
from datetime import datetime
from .extensions import db

class User(db.Model, UserMixin):
    __tablename__ = 'user'
    
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(20), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password = db.Column(db.String(60), nullable=False)
    
    configurations = db.relationship('Configuration', backref='owner', lazy=True)
    conversations = db.relationship('Conversation', backref='owner', lazy=True)
    custom_models = db.relationship('CustomModel', backref='owner', lazy=True)

    def __repr__(self):
        return f"User('{self.username}', '{self.email}')"

class Configuration(db.Model):
    __tablename__ = 'configuration'
    
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    inference_count = db.Column(db.Integer, nullable=False, default=18)
    model_order = db.Column(db.Text, nullable=False)  # Stored as JSON string
    
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    created_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)

    def __repr__(self):
        return f"Configuration('{self.name}', '{self.inference_count}')"

class Conversation(db.Model):
    __tablename__ = 'conversation'
    
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(150), nullable=False)
    history = db.Column(db.Text, nullable=False)  # Stored as JSON string
    
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    created_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)

    def __repr__(self):
        return f"Conversation('{self.title}', '{self.created_at}')"

class CustomModel(db.Model):
    __tablename__ = 'custom_model'
    
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)  # Model name
    description = db.Column(db.Text, nullable=True)
    file_path = db.Column(db.String(200), nullable=False)  # Path to the uploaded model file
    
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    uploaded_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)

    def __repr__(self):
        return f"CustomModel('{self.name}', '{self.uploaded_at}')"

│   ├── forms.py
# app/forms.py

from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField, BooleanField, IntegerField, TextAreaField
from wtforms.validators import DataRequired, Length, Email, EqualTo, ValidationError, NumberRange
import json

class RegistrationForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired(), Length(min=2, max=20)])
    email = StringField('Email', validators=[DataRequired(), Email()])
    password = PasswordField('Password', validators=[DataRequired(), Length(min=6)])
    confirm_password = PasswordField('Confirm Password',
                                     validators=[DataRequired(), EqualTo('password')])
    submit = SubmitField('Register')

class LoginForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired()])
    password = PasswordField('Password', validators=[DataRequired()])
    remember = BooleanField('Remember Me')
    submit = SubmitField('Login')

class SetupForm(FlaskForm):
    config_name = StringField('Configuration Name', validators=[DataRequired(), Length(min=2, max=100)])
    inference_count = IntegerField('Number of Inferences', validators=[DataRequired(), NumberRange(min=1, max=100)])
    model_order = StringField('Model Order', validators=[DataRequired()])  # Stored as JSON string
    submit = SubmitField('Save Configuration')

│   ├── routes/
│   │   ├── __init__.py
# app/routes/__init__.py

from .main import main_bp
from .auth import auth_bp
from .conversation import conversation_bp

│   │   ├── main.py
# app/routes/main.py

from flask import Blueprint, render_template, redirect, url_for, flash, request, session
from flask_login import login_required, current_user
from app import db
from app.models import Configuration, CustomModel
from app.forms import SetupForm
import json
from werkzeug.utils import secure_filename
import os
import logging

main_bp = Blueprint('main', __name__)

ALLOWED_EXTENSIONS = {'json', 'yaml', 'yml'}

def allowed_file(filename):
    """Check if the uploaded file has an allowed extension."""
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@main_bp.route('/')
def home():
    """Home page route. Redirects to dashboard if user is authenticated."""
    if current_user.is_authenticated:
        return redirect(url_for('main.dashboard'))
    return render_template('home.html')

@main_bp.route('/dashboard')
@login_required
def dashboard():
    """User dashboard route."""
    configurations = Configuration.query.filter_by(owner=current_user).all()
    custom_models = CustomModel.query.filter_by(owner=current_user).all()
    conversations = current_user.conversations  # Assuming relationship is set
    recent_activity = []  # Implement if needed
    return render_template('dashboard.html', configurations=configurations, custom_models=custom_models, conversations=conversations, recent_activity=recent_activity)

@main_bp.route('/upload_model', methods=['GET', 'POST'])
@login_required
def upload_model():
    """
    Route to handle uploading of custom models.
    Handles both GET (rendering the upload form) and POST (processing the uploaded file).
    """
    if request.method == 'POST':
        if 'model_file' not in request.files:
            flash('No file part.', 'warning')
            return redirect(request.url)
        file = request.files['model_file']
        if file.filename == '':
            flash('No selected file.', 'warning')
            return redirect(request.url)
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            upload_folder = os.path.join('app', 'uploaded_models')
            os.makedirs(upload_folder, exist_ok=True)
            file_path = os.path.join(upload_folder, filename)
            file.save(file_path)

            # Create a new CustomModel entry
            custom_model = CustomModel(
                name=request.form.get('model_name', '').strip(),
                description=request.form.get('model_description', '').strip(),
                file_path=file_path,
                owner=current_user
            )
            try:
                db.session.add(custom_model)
                db.session.commit()
                flash('Custom model uploaded successfully.', 'success')
                return redirect(url_for('main.setup'))
            except Exception as e:
                db.session.rollback()
                flash('An error occurred while uploading the model. Please try again.', 'danger')
                logging.error(f"Error uploading model: {e}")
                return redirect(request.url)
        else:
            flash('Invalid file type. Allowed types are: json, yaml, yml.', 'warning')
            return redirect(request.url)
    else:
        return render_template('upload_model.html')

@main_bp.route('/setup', methods=['GET', 'POST'])
@login_required
def setup():
    """
    Route to handle the setup configuration.
    Utilizes Flask-WTF's SetupForm for secure form handling and CSRF protection.
    """
    form = SetupForm()
    if form.validate_on_submit():
        # Retrieve form data using Flask-WTF's form object
        models_info = {}
        inference_count = form.inference_count.data
        model_order = form.model_order.data  # JSON string
        try:
            model_order = json.loads(model_order)
        except json.JSONDecodeError:
            flash('Invalid model order configuration.', 'danger')
            return redirect(request.url)

        # Process each slot's data
        for slot_num in range(1, 10):
            slot_id = f'slot_{slot_num}'
            nickname = request.form.get(f'nickname_{slot_id}', '').strip()
            role = request.form.get(f'role_{slot_id}', '').strip()
            model_name = request.form.get(f'model_name_{slot_id}', '').strip()
            instruct = request.form.get(f'instruct_{slot_id}', '').strip()
            context_window = request.form.get(f'context_window_{slot_id}', '2048').strip()
            options = request.form.get(f'options_{slot_id}', '{}').strip()

            # Validate and parse options
            try:
                options = json.loads(options) if options else {}
            except json.JSONDecodeError:
                flash(f"Invalid JSON for options in {slot_id}.", 'warning')
                options = {}

            models_info[slot_id] = {
                'nickname': nickname,
                'role': role,
                'model_name': model_name,
                'instruct': instruct,
                'context_window': int(context_window),
                'options': options
            }

        # Create a new Configuration entry
        config_name = form.config_name.data.strip()
        new_config = Configuration(
            name=config_name,
            inference_count=int(inference_count),
            model_order=json.dumps(model_order),
            owner=current_user
        )

        try:
            db.session.add(new_config)
            db.session.commit()
            # Store models_info in session or handle as needed
            session['models_info'] = models_info
            flash('Setup configurations saved successfully.', 'success')
            return redirect(url_for('main.dashboard'))
        except Exception as e:
            db.session.rollback()
            flash('An error occurred while saving your configuration. Please try again.', 'danger')
            logging.error(f"Error saving configuration: {e}")
            return redirect(request.url)
    else:
        if request.method == 'POST':
            flash('Please correct the errors in the form.', 'danger')

    # Fetch the latest configuration or initialize default
    latest_config = Configuration.query.filter_by(owner=current_user).order_by(Configuration.created_at.desc()).first()
    if latest_config:
        model_order = json.loads(latest_config.model_order)
        # Fetch custom models uploaded by the user
        custom_models = CustomModel.query.filter_by(owner=current_user).all()

        # Initialize models_info with existing slots if available
        models_info = {}
        for slot_num in range(1, 10):
            slot_id = f'slot_{slot_num}'
            models_info[slot_id] = {
                'nickname': '',
                'role': '',
                'model_name': '',
                'instruct': '',
                'context_window': 2048,
                'options': {}
            }
    else:
        # Initialize with empty slots numbered 1-9 and default model_order
        models_info = {}
        model_order = [f'slot_{i}' for i in range(1, 10)]  # Default order
        custom_models = []

    # List of available models with exact Ollama names
    available_models = [
        {
            'name': 'llama3.2:1b',
            'nickname': 'The Speedster',
            'size': '1 billion parameters',
            'description': 'Ideal for tasks that require quick responses without sacrificing too much accuracy. Great for day-to-day text summarization, quick instructions, or short dialogues.'
        },
        {
            'name': 'llama3.2:3b',
            'nickname': 'The Balanced One',
            'size': '3 billion parameters',
            'description': 'A well-rounded model for text generation, summarization, and dialogue, providing a balance between speed and complexity.'
        },
        {
            'name': 'falcon-7b',
            'nickname': 'The Broad Thinker',
            'size': '7 billion parameters',
            'description': 'Versatile and can be applied to a wide range of language tasks, from creative writing to technical assistance.'
        },
        {
            'name': 'mike/mistral',
            'nickname': 'The Contextual Genius',
            'size': '12 billion parameters, 128K context window',
            'description': 'Excels in large-context tasks, such as analyzing long documents or holding extended conversations.'
        },
        {
            'name': 'Solar-Pro',
            'nickname': 'The Tech Guru',
            'size': '22 billion parameters',
            'description': 'Exceptional performance in generating code, technical documents, and complex instructions.'
        },
        # Add more models as needed
    ]

    return render_template(
        'setup.html',
        form=form,
        models_info=models_info,
        model_order=model_order,
        available_models=available_models,
        custom_models=custom_models
        # Removed enumerate=enumerate since it's now available via context processor
    )

@main_bp.route('/configuration/view/<int:config_id>', methods=['GET'])
@login_required
def view_configuration(config_id):
    """
    Route to view a specific configuration based on config_id.
    """
    configuration = Configuration.query.filter_by(id=config_id, owner=current_user).first()
    if not configuration:
        flash('Configuration not found.', 'warning')
        return redirect(url_for('main.dashboard'))
    
    # Assuming you have a template named 'view_configuration.html'
    return render_template('view_configuration.html', configuration=configuration)

@main_bp.route('/configuration/edit/<int:config_id>', methods=['GET', 'POST'])
@login_required
def edit_configuration(config_id):
    """
    Route to edit a specific configuration based on config_id.
    """
    configuration = Configuration.query.filter_by(id=config_id, owner=current_user).first()
    if not configuration:
        flash('Configuration not found.', 'warning')
        return redirect(url_for('main.dashboard'))
    
    form = SetupForm(obj=configuration)
    if form.validate_on_submit():
        # Update configuration details
        configuration.name = form.config_name.data.strip()
        configuration.inference_count = int(form.inference_count.data)
        configuration.model_order = form.model_order.data  # Assuming JSON string
        
        try:
            db.session.commit()
            flash('Configuration updated successfully.', 'success')
            return redirect(url_for('main.dashboard'))
        except Exception as e:
            db.session.rollback()
            flash('An error occurred while updating the configuration. Please try again.', 'danger')
            logging.error(f"Error updating configuration: {e}")
            return redirect(request.url)
    
    # Prepopulate form with existing data
    form.config_name.data = configuration.name
    form.inference_count.data = configuration.inference_count
    form.model_order.data = configuration.model_order

    return render_template('edit_configuration.html', form=form, configuration=configuration)

@main_bp.route('/configuration/delete/<int:config_id>', methods=['POST'])
@login_required
def delete_configuration(config_id):
    """
    Route to delete a specific configuration based on config_id.
    """
    configuration = Configuration.query.filter_by(id=config_id, owner=current_user).first()
    if not configuration:
        flash('Configuration not found.', 'warning')
        return redirect(url_for('main.dashboard'))
    
    try:
        db.session.delete(configuration)
        db.session.commit()
        flash('Configuration deleted successfully.', 'success')
    except Exception as e:
        db.session.rollback()
        flash('An error occurred while deleting the configuration. Please try again.', 'danger')
        logging.error(f"Error deleting configuration: {e}")
    
    return redirect(url_for('main.dashboard'))

│   │   ├── auth.py
# app/routes/auth.py

from flask import Blueprint, render_template, redirect, url_for, flash, request
from app.forms import RegistrationForm, LoginForm
from app.models import User
from app import db
from werkzeug.security import generate_password_hash, check_password_hash
from flask_login import login_user, logout_user, login_required

auth_bp = Blueprint('auth', __name__)

@auth_bp.route('/register', methods=['GET', 'POST'])
def register():
    form = RegistrationForm()
    if form.validate_on_submit():
        # Check if username or email already exists
        existing_user = User.query.filter(
            (User.username == form.username.data) | (User.email == form.email.data)
        ).first()
        if existing_user:
            flash('Username or email already exists.', 'danger')
            return redirect(url_for('auth.register'))
        
        # Registration logic here
        hashed_password = generate_password_hash(form.password.data)
        user = User(username=form.username.data, email=form.email.data, password=hashed_password)
        db.session.add(user)
        db.session.commit()
        flash('Registration successful! Please log in.', 'success')
        return redirect(url_for('auth.login'))
    return render_template('register.html', form=form)

@auth_bp.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        # Login logic here
        user = User.query.filter_by(username=form.username.data).first()
        if user and check_password_hash(user.password, form.password.data):
            login_user(user, remember=form.remember.data)
            flash('Logged in successfully!', 'success')
            next_page = request.args.get('next')
            return redirect(next_page) if next_page else redirect(url_for('main.dashboard'))
        else:
            flash('Invalid username or password.', 'danger')
    return render_template('login.html', form=form)

@auth_bp.route('/logout')
@login_required
def logout():
    logout_user()
    flash('You have been logged out.', 'info')
    return redirect(url_for('main.home'))

│   │   └── conversation.py
# app/routes/conversation.py

from flask import (
    Blueprint, render_template, redirect, url_for, flash,
    request, jsonify, send_file, session
)
from flask_login import login_required, current_user
from app.extensions import db
from app.celery_app import celery
from app.models import Conversation, Configuration
from datetime import datetime
import json
from werkzeug.utils import secure_filename
import os
import logging
import subprocess

conversation_bp = Blueprint('conversation_bp', __name__)

@celery.task(bind=True)
def process_model_inference(self, model_name, prompt, model_options):
    """
    Celery task to process model inference asynchronously.
    """
    cmd = ['ollama', 'run']

    # Add model-specific options if provided
    if model_options:
        for key, value in model_options.items():
            cmd.extend([f'--{key}', str(value)])

    # Add the model name
    cmd.append(model_name)

    # Separator for the prompt
    cmd.append('--')

    # Add the prompt
    cmd.append(prompt)

    try:
        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        stdout, stderr = process.communicate(timeout=120)  # 2-minute timeout

        if process.returncode != 0:
            return {'success': False, 'error': stderr.strip()}
        else:
            return {'success': True, 'response': stdout.strip()}
    except subprocess.TimeoutExpired:
        process.kill()
        return {'success': False, 'error': 'Model inference timed out.'}
    except Exception as e:
        logging.exception("Exception during model inference.")
        return {'success': False, 'error': str(e)}

def construct_prompt(model_key, conversation_history, models_info, conversation_goal):
    """
    Constructs the prompt for the model based on the role, instruct statements,
    conversation history, and goal.
    """
    model_info = models_info.get(model_key, {})
    role = model_info.get('role', '')
    instruct = model_info.get('instruct', '')
    context_window = model_info.get('context_window', 2048)  # Default context window

    prompt = ''
    if role:
        prompt += f"Role: {role}\n"
    if instruct:
        prompt += f"Instruct: {instruct}\n"
    if conversation_goal:
        prompt += f"Conversation Goal: {conversation_goal}\n"

    # Include conversation history within context window (rough estimation: 1 token ≈ 4 characters)
    max_characters = context_window * 4
    history_text = ''
    for entry in reversed(conversation_history):
        entry_text = f"{entry['speaker']} [{entry['timestamp']}]: {entry['message']}\n"
        if len(history_text) + len(entry_text) < max_characters:
            history_text = entry_text + history_text
        else:
            break  # Exceeds context window

    prompt += history_text
    prompt += f"{model_key}:"
    return prompt

@conversation_bp.route('/conversation', methods=['GET', 'POST'])
@login_required
def conversation():
    if request.method == 'POST':
        return handle_post_request()
    else:
        return handle_get_request()

def handle_post_request():
    """
    Handles POST requests to the /conversation route.
    This includes starting a new conversation or handling OmniCall input.
    """
    if 'conversation_id' not in session:
        # Handle initial message and conversation goal
        conversation_goal = request.form.get('conversation_goal', '').strip()
        initial_message = request.form.get('initial_message', '').strip()
        if not initial_message:
            flash('Initial message is required.', 'warning')
            return render_template('conversation_start.html')

        # Create a new Conversation entry
        new_conversation = Conversation(
            title=request.form.get(
                'conversation_title',
                f"{current_user.username}'s Conversation"
            ),
            history=json.dumps([{
                'speaker': 'User',
                'message': initial_message,
                'timestamp': datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')
            }]),
            owner=current_user
        )
        try:
            db.session.add(new_conversation)
            db.session.commit()
            session['conversation_id'] = new_conversation.id
            session['conversation_goal'] = conversation_goal

            # Initialize models_info in session
            latest_config = Configuration.query.filter_by(
                user_id=current_user.id
            ).order_by(Configuration.created_at.desc()).first()
            if latest_config:
                model_order = json.loads(latest_config.model_order)
                session['model_order'] = model_order

                # Fetch models_info from session or initialize
                if 'models_info' not in session:
                    models_info = {}
                    for slot_num in range(1, 10):
                        slot_id = f'slot_{slot_num}'
                        models_info[slot_id] = {
                            'nickname': '',
                            'role': '',
                            'model_name': '',
                            'instruct': '',
                            'context_window': 2048,
                            'options': {}
                        }
                    session['models_info'] = models_info
            else:
                flash('No configuration found. Please set up your conversation.', 'warning')
                return redirect(url_for('main.setup'))

            logging.debug(f"Initialized conversation ID: {new_conversation.id}")
            logging.debug(f"Conversation goal: {conversation_goal}")
            logging.debug(f"Model order: {model_order}")
            logging.debug(f"Models info: {session.get('models_info')}")

            flash('Conversation started successfully.', 'success')
            return redirect(url_for('conversation_bp.conversation'))
        except Exception as e:
            db.session.rollback()
            logging.exception("Error creating new conversation.")
            flash('An error occurred while starting the conversation. Please try again.', 'danger')
            return render_template('conversation_start.html')
    else:
        # Handle OmniCall input
        user_input = request.form.get('user_input', '').strip()
        if user_input:
            # Fetch the conversation
            conversation = Conversation.query.get(session.get('conversation_id'))
            if not conversation:
                flash('Conversation not found.', 'danger')
                return redirect(url_for('main.home'))

            # Update conversation history
            history = json.loads(conversation.history)
            history.append({
                'speaker': 'OmniCall',
                'message': user_input,
                'timestamp': datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')
            })
            conversation.history = json.dumps(history)
            db.session.commit()

            logging.debug(f"Added OmniCall input to conversation ID: {conversation.id}")

            flash('Input added to conversation.', 'success')
            return redirect(url_for('conversation_bp.conversation'))
        else:
            flash('Input is required.', 'warning')
            conversation = Conversation.query.get(session.get('conversation_id'))
            if conversation:
                history = json.loads(conversation.history)
                return render_template('omnicall.html', conversation_history=history)
            else:
                flash('Conversation not found.', 'danger')
                return redirect(url_for('main.home'))

def handle_get_request():
    """
    Handles GET requests to the /conversation route.
    This includes displaying the conversation and processing model responses.
    """
    try:
        if 'conversation_id' not in session:
            # Render initial message and conversation goal input form
            return render_template('conversation_start.html')
        else:
            # Fetch the conversation
            conversation = Conversation.query.get(session.get('conversation_id'))
            if not conversation:
                flash('Conversation not found.', 'danger')
                return redirect(url_for('main.home'))

            history = json.loads(conversation.history)
            conversation_goal = session.get('conversation_goal', '')
            latest_config = Configuration.query.filter_by(
                user_id=current_user.id
            ).order_by(Configuration.created_at.desc()).first()
            if not latest_config:
                flash('No configuration found. Please set up your conversation.', 'warning')
                return redirect(url_for('main.setup'))

            model_order = session.get('model_order', json.loads(latest_config.model_order))
            inference_count = latest_config.inference_count

            # Determine the next model in the sequence
            current_turn = len(history) - 1  # Subtracting the initial user message
            if current_turn >= inference_count:
                flash('Conversation has reached its maximum number of inferences.', 'info')
                return redirect(url_for('conversation_bp.end_conversation'))

            # Validate model_order
            if not isinstance(model_order, list) or len(model_order) == 0:
                logging.error("model_order is empty or not a list.")
                flash("Configuration error: No models available for conversation.", 'danger')
                return redirect(url_for('main.setup'))

            current_model_key = model_order[current_turn % len(model_order)]

            logging.debug(f"Model order: {model_order}")
            logging.debug(f"Current turn: {current_turn}")
            logging.debug(f"Current model key: {current_model_key}")

            # Check if current_model_key is OmniCall
            if current_model_key.lower() == 'omnicall':
                return render_template('omnicall.html', conversation_history=history)

            # Fetch models_info from session
            models_info = session.get('models_info', {})
            if not models_info:
                flash('Model configurations not found. Please set up your conversation.', 'warning')
                return redirect(url_for('main.setup'))

            model_info = models_info.get(current_model_key, {})
            model_name = model_info.get('model_name', '')
            instruct = model_info.get('instruct', '')
            context_window = model_info.get('context_window', 2048)
            options = model_info.get('options', {})

            if not model_name:
                flash(f"Model '{current_model_key}' is not configured.", 'danger')
                return redirect(url_for('conversation_bp.conversation'))

            # Construct the prompt
            prompt = construct_prompt(current_model_key, history, models_info, conversation_goal)
            logging.debug(f"Constructed prompt: {prompt}")

            # Enqueue the model inference task
            task = process_model_inference.delay(model_name, prompt, options)

            # Wait for the task to complete (for simplicity; consider using WebSockets for real-time updates)
            result = task.get(timeout=120)  # 2-minute timeout

            if result['success']:
                response = result['response']
                # Update conversation history
                history.append({
                    'speaker': model_info.get('nickname') or model_info.get('role') or current_model_key,
                    'message': response,
                    'timestamp': datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')
                })
                conversation.history = json.dumps(history)
                db.session.commit()

                logging.debug(f"Added model response to conversation ID: {conversation.id}")

                flash(f"Response from {model_info.get('nickname') or model_info.get('role') or current_model_key}.", 'success')
            else:
                flash(f"Error from {model_info.get('nickname') or model_info.get('role') or current_model_key}: {result['error']}", 'danger')

            return redirect(url_for('conversation_bp.conversation'))
    except ZeroDivisionError:
        logging.exception("ZeroDivisionError encountered in /conversation route.")
        flash("An internal error occurred. Please contact support.", 'danger')
        return redirect(url_for('main.dashboard'))
    except Exception as e:
        logging.exception("Unexpected error during GET request in /conversation route.")
        flash("An unexpected error occurred. Please try again.", "danger")
        return redirect(url_for('main.dashboard'))

@conversation_bp.route('/end_conversation', methods=['GET', 'POST'])
@login_required
def end_conversation():
    """
    Handles the end of a conversation, allowing users to save the conversation history to a file.
    """
    if 'conversation_id' not in session:
        flash('No active conversation to end.', 'warning')
        return redirect(url_for('main.home'))
    
    conversation = Conversation.query.get(session.get('conversation_id'))
    if not conversation:
        flash('Conversation not found.', 'danger')
        return redirect(url_for('main.home'))

    history = json.loads(conversation.history)

    if request.method == 'POST':
        # Save conversation to a file
        file_name = request.form.get('file_name', 'conversation.txt').strip()
        if not file_name:
            file_name = 'conversation.txt'
        file_name = secure_filename(file_name)

        try:
            with open(file_name, 'w') as f:
                for entry in history:
                    f.write(f"{entry['speaker']} [{entry['timestamp']}]: {entry['message']}\n")
            logging.debug(f"Conversation ID {conversation.id} saved to {file_name}")
            return send_file(file_name, as_attachment=True)
        except Exception as e:
            logging.exception("Error saving conversation to file.")
            flash(f"Error saving conversation: {e}", 'danger')
            return render_template('end_conversation.html', conversation_history=history)
    else:
        return render_template('end_conversation.html', conversation_history=history)

│   ├── templates/
│   │   ├── base.html
<!-- app/templates/base.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Symphoni</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Custom CSS -->
    <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
</head>
<body class="bg-dark text-light">
    <!-- Navigation Bar -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-purple mb-4">
        <div class="container-fluid">
            <a class="navbar-brand" href="{{ url_for('main.home') }}">Symphoni</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    {% if current_user.is_authenticated %}
                        <li class="nav-item">
                            <a class="nav-link" href="{{ url_for('main.setup') }}">Setup</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="{{ url_for('conversation_bp.conversation') }}">Conversation</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="{{ url_for('auth.logout') }}">Logout</a>
                        </li>
                    {% else %}
                        <li class="nav-item">
                            <a class="nav-link" href="{{ url_for('auth.login') }}">Login</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="{{ url_for('auth.register') }}">Register</a>
                        </li>
                    {% endif %}
                </ul>
            </div>
        </div>
    </nav>

    <!-- Flash Messages -->
    <div class="container">
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="alert alert-{{ category }} alert-dismissible fade show" role="alert">
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                {% endfor %}
            {% endif %}
        {% endwith %}
    </div>

    <!-- Main Content -->
    <div class="container">
        {% block content %}{% endblock %}
    </div>

    <!-- Bootstrap JS and dependencies -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Custom JS -->
    <script src="{{ url_for('static', filename='js/scripts.js') }}"></script>
</body>
</html>


│   │   ├── conversation.html
<!-- app/templates/conversation/conversation.html -->
{% extends "base.html" %}

{% block content %}
<div class="container my-4">
    <!-- Breadcrumb Navigation -->
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="{{ url_for('main.dashboard') }}">Dashboard</a></li>
            <li class="breadcrumb-item"><a href="{{ url_for('conversation_bp.conversation_list') }}">Conversations</a></li>
            <li class="breadcrumb-item active" aria-current="page">{{ conversation.title }}</li>
        </ol>
    </nav>

    <h2>{{ conversation.title }}</h2>

    <!-- Conversation Messages -->
    <div class="mb-4">
        <!-- Initial Message -->
        <div class="card mb-3">
            <div class="card-header">
                <strong>{{ conversation.owner.username }}</strong> on {{ conversation.created_at.strftime('%Y-%m-%d %H:%M') }}
            </div>
            <div class="card-body">
                <p>{{ conversation.initial_message }}</p>
            </div>
        </div>

        <!-- Replies -->
        {% for message in conversation.messages %}
            <div class="card mb-3 ms-4">
                <div class="card-header">
                    <strong>{{ message.sender.username }}</strong> on {{ message.created_at.strftime('%Y-%m-%d %H:%M') }}
                </div>
                <div class="card-body">
                    <p>{{ message.content }}</p>
                </div>
            </div>
        {% else %}
            {% if not conversation.messages %}
                <p>No replies yet.</p>
            {% endif %}
        {% endfor %}
    </div>

    <!-- Reply Form -->
    <h3>Reply to Conversation</h3>
    <form method="POST" action="{{ url_for('conversation_bp.add_message', convo_id=conversation.id) }}">
        {{ form.hidden_tag() }}

        <div class="mb-3">
            {{ form.message.label(class="form-label") }}
            {{ form.message(class="form-control", placeholder="Enter your reply", rows="4") }}
            {% for error in form.message.errors %}
                <div class="text-danger">{{ error }}</div>
            {% endfor %}
        </div>

        <button type="submit" class="btn btn-primary">{{ form.submit.label.text }}</button>
    </form>
</div>
{% endblock %}

│   │   ├── dashboard.html
<!-- app/templates/dashboard.html -->
{% extends "base.html" %}

{% block content %}
<div class="container my-4">
    <!-- Welcome Section -->
    <div class="row mb-4">
        <div class="col">
            <h1 class="mb-3">Welcome, {{ current_user.username }}!</h1>
            <p class="lead">Manage your configurations, custom models, and conversations all in one place.</p>
        </div>
    </div>

    <!-- Statistics Cards -->
    <div class="row mb-4">
        <!-- Configurations Card -->
        <div class="col-md-4">
            <div class="card text-bg-primary mb-3">
                <div class="card-body">
                    <h5 class="card-title">Configurations</h5>
                    <p class="card-text display-4">{{ configurations | length }}</p>
                </div>
            </div>
        </div>
        <!-- Custom Models Card -->
        <div class="col-md-4">
            <div class="card text-bg-success mb-3">
                <div class="card-body">
                    <h5 class="card-title">Custom Models</h5>
                    <p class="card-text display-4">{{ custom_models | length }}</p>
                </div>
            </div>
        </div>
        <!-- Conversations Card -->
        <div class="col-md-4">
            <div class="card text-bg-warning mb-3">
                <div class="card-body">
                    <h5 class="card-title">Conversations</h5>
                    <p class="card-text display-4">{{ conversations | length }}</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Configurations Management -->
    <div class="row mb-5">
        <div class="col">
            <h3>Your Configurations</h3>
            <a href="{{ url_for('main.setup') }}" class="btn btn-primary mb-3">Create New Configuration</a>
            {% if configurations %}
                <div class="table-responsive">
                    <table class="table table-striped table-hover align-middle">
                        <thead class="table-dark">
                            <tr>
                                <th scope="col">Configuration Name</th>
                                <th scope="col">Inference Count</th>
                                <th scope="col">Created At</th>
                                <th scope="col" class="text-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for config in configurations %}
                                <tr>
                                    <td>{{ config.name }}</td>
                                    <td>{{ config.inference_count }}</td>
                                    <td>{{ config.created_at.strftime('%Y-%m-%d %H:%M') }}</td>
                                    <td class="text-center">
                                        <a href="{{ url_for('main.view_configuration', config_id=config.id) }}" class="btn btn-sm btn-info me-1" title="View Configuration">
                                            <i class="bi bi-eye"></i> View
                                        </a>
                                        <a href="{{ url_for('main.edit_configuration', config_id=config.id) }}" class="btn btn-sm btn-secondary me-1" title="Edit Configuration">
                                            <i class="bi bi-pencil-square"></i> Edit
                                        </a>
                                        <form action="{{ url_for('main.delete_configuration', config_id=config.id) }}" method="POST" class="d-inline" onsubmit="return confirm('Are you sure you want to delete this configuration?');">
                                            {{ csrf_token() }}
                                            <button type="submit" class="btn btn-sm btn-danger" title="Delete Configuration">
                                                <i class="bi bi-trash"></i> Delete
                                            </button>
                                        </form>
                                    </td>
                                </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            {% else %}
                <div class="alert alert-info" role="alert">
                    You have no configurations yet. <a href="{{ url_for('main.setup') }}" class="alert-link">Create one now.</a>
                </div>
            {% endif %}
        </div>
    </div>

    <!-- Custom Models Management -->
    <div class="row mb-5">
        <div class="col">
            <h3>Your Custom Models</h3>
            <a href="{{ url_for('main.upload_model') }}" class="btn btn-success mb-3">Upload New Custom Model</a>
            {% if custom_models %}
                <div class="table-responsive">
                    <table class="table table-striped table-hover align-middle">
                        <thead class="table-dark">
                            <tr>
                                <th scope="col">Model Name</th>
                                <th scope="col">Description</th>
                                <th scope="col">Uploaded At</th>
                                <th scope="col" class="text-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for model in custom_models %}
                                <tr>
                                    <td>{{ model.name }}</td>
                                    <td>{{ model.description }}</td>
                                    <td>{{ model.uploaded_at.strftime('%Y-%m-%d %H:%M') }}</td>
                                    <td class="text-center">
                                        <a href="{{ url_for('main.view_custom_model', model_id=model.id) }}" class="btn btn-sm btn-info me-1" title="View Custom Model">
                                            <i class="bi bi-eye"></i> View
                                        </a>
                                        <form action="{{ url_for('main.delete_custom_model', model_id=model.id) }}" method="POST" class="d-inline" onsubmit="return confirm('Are you sure you want to delete this custom model?');">
                                            {{ csrf_token() }}
                                            <button type="submit" class="btn btn-sm btn-danger" title="Delete Custom Model">
                                                <i class="bi bi-trash"></i> Delete
                                            </button>
                                        </form>
                                    </td>
                                </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            {% else %}
                <div class="alert alert-info" role="alert">
                    You have no custom models uploaded. <a href="{{ url_for('main.upload_model') }}" class="alert-link">Upload one now.</a>
                </div>
            {% endif %}
        </div>
    </div>

    <!-- Conversations Overview -->
    <div class="row mb-5">
        <div class="col">
            <h3>Your Conversations</h3>
            <a href="{{ url_for('conversation_bp.conversation') }}" class="btn btn-warning mb-3">Start New Conversation</a>
            {% if conversations %}
                <div class="table-responsive">
                    <table class="table table-striped table-hover align-middle">
                        <thead class="table-dark">
                            <tr>
                                <th scope="col">Conversation Title</th>
                                <th scope="col">Created At</th>
                                <th scope="col">Last Updated</th>
                                <th scope="col" class="text-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for convo in conversations %}
                                <tr>
                                    <td>{{ convo.title }}</td>
                                    <td>{{ convo.created_at.strftime('%Y-%m-%d %H:%M') }}</td>
                                    <td>{{ convo.updated_at.strftime('%Y-%m-%d %H:%M') }}</td>
                                    <td class="text-center">
                                        <a href="{{ url_for('conversation_bp.view_conversation', convo_id=convo.id) }}" class="btn btn-sm btn-info me-1" title="View Conversation">
                                            <i class="bi bi-eye"></i> View
                                        </a>
                                        <form action="{{ url_for('conversation_bp.delete_conversation', convo_id=convo.id) }}" method="POST" class="d-inline" onsubmit="return confirm('Are you sure you want to delete this conversation?');">
                                            {{ csrf_token() }}
                                            <button type="submit" class="btn btn-sm btn-danger" title="Delete Conversation">
                                                <i class="bi bi-trash"></i> Delete
                                            </button>
                                        </form>
                                    </td>
                                </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            {% else %}
                <div class="alert alert-info" role="alert">
                    You have no conversations yet. <a href="{{ url_for('conversation_bp.conversation') }}" class="alert-link">Start one now.</a>
                </div>
            {% endif %}
        </div>
    </div>

    <!-- Recent Activity or Notifications -->
    <div class="row mb-5">
        <div class="col">
            <h3>Recent Activity</h3>
            {% if recent_activity %}
                <ul class="list-group">
                    {% for activity in recent_activity %}
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <div>
                                <strong>{{ activity.timestamp.strftime('%Y-%m-%d %H:%M') }}</strong>: {{ activity.message }}
                            </div>
                            <!-- Optional: Add icons or badges -->
                        </li>
                    {% endfor %}
                </ul>
            {% else %}
                <div class="alert alert-info" role="alert">
                    No recent activity to display.
                </div>
            {% endif %}
        </div>
    </div>

    <!-- Optional: Charts or Graphs for Analytics -->
    <!-- You can integrate chart libraries like Chart.js or Plotly for visual analytics -->
</div>
{% endblock %}

│   │   ├── end_conversation.html
{% extends "base.html" %}
{% block content %}
<h2>Conversation Ended</h2>
<div class="mb-3" style="max-height: 60vh; overflow-y: auto;">
    <ul class="list-group">
        {% for entry in conversation_history %}
            <li class="list-group-item bg-dark border-secondary">
                <strong>{{ entry.speaker }}</strong> <span class="text-muted">[{{ entry.timestamp }}]</span>: {{ entry.message }}
            </li>
        {% endfor %}
    </ul>
</div>
<form method="POST" action="{{ url_for('conversation_bp.end_conversation') }}">
    <div class="mb-3">
        <label for="file_name" class="form-label">Download Conversation As:</label>
        <input type="text" class="form-control" id="file_name" name="file_name" placeholder="e.g., my_conversation.txt">
    </div>
    <button type="submit" class="btn btn-success">Download</button>
</form>
{% endblock %}

│   │   ├── home.html
<!-- app/templates/home.html -->
{% extends "base.html" %}
{% block content %}
<div class="text-center">
    <h1>Welcome to Symphoni</h1>
    <p>Orchestrate multi-model conversations with ease.</p>
    {% if not current_user.is_authenticated %}
        <a href="{{ url_for('auth.login') }}" class="btn btn-primary">Login</a>
        <a href="{{ url_for('auth.register') }}" class="btn btn-secondary">Register</a>
    {% else %}
        <a href="{{ url_for('main.setup') }}" class="btn btn-primary">Setup Conversation</a>
        <a href="{{ url_for('conversation_bp.conversation') }}" class="btn btn-secondary">Start Conversation</a>
    {% endif %}
</div>
{% endblock %}

│   │   ├── login.html
<!-- app/templates/login.html -->
{% extends "base.html" %}
{% block content %}
  <h2>Login</h2>
  <form method="post" action="{{ url_for('auth.login') }}">
    {{ form.hidden_tag() }}
    <p>
      {{ form.username.label }}<br>
      {{ form.username(class="form-control", size=32) }}
      {% for error in form.username.errors %}
          <small class="text-danger">{{ error }}</small>
      {% endfor %}
    </p>
    <p>
      {{ form.password.label }}<br>
      {{ form.password(class="form-control", size=32) }}
      {% for error in form.password.errors %}
          <small class="text-danger">{{ error }}</small>
      {% endfor %}
    </p>
    <p>
      {{ form.remember() }} {{ form.remember.label }}
    </p>
    <p><input type="submit" class="btn btn-primary" value="Login"></p>
  </form>
{% endblock %}

│   │   ├── omnicall.html
{% extends "base.html" %}
{% block content %}
<h2>OmniCall Input</h2>
<form method="POST" action="{{ url_for('conversation_bp.conversation') }}">
    <div class="mb-3">
        <label for="user_input" class="form-label">Your Input:</label>
        <textarea class="form-control" id="user_input" name="user_input" rows="3" placeholder="Enter your input here..." required></textarea>
    </div>
    <button type="submit" class="btn btn-primary">Submit Input</button>
</form>
{% endblock %}


│   │   ├── register.html
<!-- app/templates/register.html -->
{% extends "base.html" %}
{% block content %}
  <h2>Register</h2>
  <form method="post" action="{{ url_for('auth.register') }}">
    {{ form.hidden_tag() }}
    <p>
      {{ form.username.label }}<br>
      {{ form.username(class="form-control", size=32) }}
      {% for error in form.username.errors %}
          <small class="text-danger">{{ error }}</small>
      {% endfor %}
    </p>
    <p>
      {{ form.email.label }}<br>
      {{ form.email(class="form-control", size=32) }}
      {% for error in form.email.errors %}
          <small class="text-danger">{{ error }}</small>
      {% endfor %}
    </p>
    <p>
      {{ form.password.label }}<br>
      {{ form.password(class="form-control", size=32) }}
      {% for error in form.password.errors %}
          <small class="text-danger">{{ error }}</small>
      {% endfor %}
    </p>
    <p>
      {{ form.confirm_password.label }}<br>
      {{ form.confirm_password(class="form-control", size=32) }}
      {% for error in form.confirm_password.errors %}
          <small class="text-danger">{{ error }}</small>
      {% endfor %}
    </p>
    <p><input type="submit" class="btn btn-primary" value="Register"></p>
  </form>
{% endblock %}

│   │   ├── setup.html
<!-- app/templates/setup.html -->
{% extends "base.html" %}
{% block content %}
<div class="container my-4">
    <h2>Setup Your Conversation</h2>
    <form method="POST" action="{{ url_for('main.setup') }}">
        {{ form.hidden_tag() }} <!-- Renders hidden fields like CSRF token -->

        <!-- Configuration Name -->
        <div class="mb-3">
            {{ form.config_name.label(class="form-label") }}
            {{ form.config_name(class="form-control", placeholder="Enter a name for this configuration") }}
            {% if form.config_name.errors %}
                <div class="text-danger">
                    {% for error in form.config_name.errors %}
                        <small>{{ error }}</small>
                    {% endfor %}
                </div>
            {% endif %}
        </div>

        <!-- Number of Inferences -->
        <div class="mb-4">
            {{ form.inference_count.label(class="form-label") }}
            <div class="d-flex gap-3">
                <!-- Adjust based on form field type -->
                <input type="number" name="inference_count" class="form-control" min="1" max="100" value="{{ form.inference_count.data or 18 }}">
                <!-- Alternatively, if using radio buttons, iterate through options -->
            </div>
            {% if form.inference_count.errors %}
                <div class="text-danger">
                    {% for error in form.inference_count.errors %}
                        <small>{{ error }}</small>
                    {% endfor %}
                </div>
            {% endif %}
        </div>

        <!-- Available Functions -->
        <div class="mb-4">
            <h4>Available Functions</h4>
            <div id="available-functions" class="d-flex flex-wrap gap-2">
                {% for slot_num in range(1,10) %}
                    {% set slot_id = 'slot_' ~ slot_num|string %}
                    <div class="available-function badge bg-secondary p-2 draggable" draggable="true" data-slot-id="{{ slot_id }}">
                        {% if models_info.get(slot_id) and models_info[slot_id].get('nickname') %}
                            {{ models_info[slot_id]['nickname'] }}
                        {% else %}
                            Slot{{ slot_num }}
                        {% endif %}
                    </div>
                {% endfor %}
                <!-- OmniCall Function -->
                <div class="available-function badge bg-info p-2 draggable" draggable="true" data-function="omnicall">
                    OmniCall
                </div>
            </div>
        </div>

        <!-- Arrange Model Sequence -->
        <div class="mb-4">
            <h4>Arrange Model Sequence:</h4>
            <p>Drag and drop to arrange the order of model slots. You can insert OmniCall multiple times.</p>
            <ul id="model-order" class="list-group mb-3">
                {% if model_order and model_order|length > 0 %}
                    {% for idx, slot in enumerate(model_order, start=1) %}
                        <li class="list-group-item d-flex align-items-center" draggable="true">
                            <span class="badge bg-primary me-2">{{ idx }}</span>
                            <span class="flex-grow-1 slot-content">{{ slot }}</span>
                            <button type="button" class="btn btn-sm btn-danger remove-slot">Remove</button>
                        </li>
                    {% endfor %}
                {% else %}
                    <!-- Default slots if no model_order is set -->
                    {% for slot_num in range(1,19) %}
                        <li class="list-group-item d-flex align-items-center" draggable="true">
                            <span class="badge bg-primary me-2">{{ slot_num }}</span>
                            <span class="flex-grow-1 slot-content"></span>
                            <button type="button" class="btn btn-sm btn-danger remove-slot">Remove</button>
                        </li>
                    {% endfor %}
                {% endif %}
            </ul>
            {{ form.model_order(id='model_order') }} <!-- Hidden input for model_order -->
        </div>

        <!-- Save Configuration Button -->
        <button type="submit" class="btn btn-primary">{{ form.submit.label.text }}</button>
    </form>
</div>

<!-- Drag-and-Drop Script -->
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const inferenceInput = document.querySelector('input[name="inference_count"]');
        const modelOrderList = document.getElementById('model-order');
        const modelOrderInput = document.getElementById('model_order'); // Ensure this matches the form field's id
        const availableFunctions = document.getElementById('available-functions');

        // Function to update the number of slots based on selected inferences
        function updateSlots(count) {
            modelOrderList.innerHTML = ''; // Clear existing slots
            for (let i = 1; i <= count; i++) {
                const li = document.createElement('li');
                li.classList.add('list-group-item', 'd-flex', 'align-items-center');
                li.setAttribute('draggable', 'true');

                const badge = document.createElement('span');
                badge.classList.add('badge', 'bg-primary', 'me-2');
                badge.textContent = i;

                const slotContent = document.createElement('span');
                slotContent.classList.add('flex-grow-1', 'slot-content');
                slotContent.textContent = ''; // Blank by default

                const removeBtn = document.createElement('button');
                removeBtn.type = 'button';
                removeBtn.classList.add('btn', 'btn-sm', 'btn-danger', 'remove-slot');
                removeBtn.textContent = 'Remove';

                li.appendChild(badge);
                li.appendChild(slotContent);
                li.appendChild(removeBtn);

                modelOrderList.appendChild(li);
            }
            addSlotEventListeners(); // Re-add event listeners
            updateModelOrderInput(); // Update hidden input
        }

        // Function to handle inference count changes
        inferenceInput.addEventListener('input', (e) => {
            const selectedCount = parseInt(e.target.value);
            if (selectedCount >= 1 && selectedCount <= 100) { // Adjust based on allowed range
                updateSlots(selectedCount);
            }
        });

        // Function to add event listeners to slots
        function addSlotEventListeners() {
            const slots = document.querySelectorAll('#model-order .list-group-item');
            slots.forEach(slot => {
                // Drag events
                slot.addEventListener('dragstart', handleDragStart, false);
                slot.addEventListener('dragover', handleDragOver, false);
                slot.addEventListener('drop', handleDrop, false);
                slot.addEventListener('dragend', handleDragEnd, false);

                // Remove button event
                const removeBtn = slot.querySelector('.remove-slot');
                removeBtn.addEventListener('click', () => {
                    slot.remove();
                    updateModelOrderInput();
                });
            });
        }

        // Drag and Drop Handlers
        let dragSrcEl = null;

        function handleDragStart(e) {
            dragSrcEl = this;
            e.dataTransfer.effectAllowed = 'move';
            e.dataTransfer.setData('text/plain', this.querySelector('.slot-content').textContent);
            this.classList.add('dragging');
        }

        function handleDragOver(e) {
            if (e.preventDefault) {
                e.preventDefault(); // Necessary to allow drop
            }
            e.dataTransfer.dropEffect = 'move';
            return false;
        }

        function handleDrop(e) {
            if (e.stopPropagation) {
                e.stopPropagation(); // Prevent default action
            }

            if (dragSrcEl !== this) {
                const draggedData = e.dataTransfer.getData('text/plain');
                const targetContent = this.querySelector('.slot-content');

                // Swap the content
                const temp = targetContent.textContent;
                targetContent.textContent = draggedData;
                dragSrcEl.querySelector('.slot-content').textContent = temp;

                updateModelOrderInput();
            }
            return false;
        }

        function handleDragEnd(e) {
            this.classList.remove('dragging');
        }

        // Handle dragging from Available Functions to Slots
        availableFunctions.querySelectorAll('.draggable').forEach(func => {
            func.addEventListener('dragstart', (e) => {
                e.dataTransfer.setData('text/plain', func.dataset.slotId || func.dataset.function || '');
                e.dataTransfer.effectAllowed = 'copyMove';
            });
        });

        modelOrderList.addEventListener('dragover', (e) => {
            e.preventDefault();
        });

        modelOrderList.addEventListener('drop', (e) => {
            e.preventDefault();
            const data = e.dataTransfer.getData('text/plain');
            const target = e.target.closest('.list-group-item');
            if (target) {
                const slotContent = target.querySelector('.slot-content');
                if (data.startsWith('slot_')) {
                    // It's a model slot from Available Functions
                    const funcElement = availableFunctions.querySelector(`.available-function[data-slot-id="${data}"]`);
                    const funcName = funcElement ? funcElement.textContent.trim() : 'Unknown Function';
                    slotContent.textContent = funcName;
                } else if (data === 'omnicall') {
                    // It's OmniCall
                    slotContent.textContent = 'OmniCall';
                }
                updateModelOrderInput();
            }
        });

        // Function to update the hidden input for model_order
        function updateModelOrderInput() {
            const slots = modelOrderList.querySelectorAll('.list-group-item .slot-content');
            const order = Array.from(slots).map(slot => slot.textContent.trim()).filter(name => name !== '');
            modelOrderInput.value = JSON.stringify(order);
        }

        // Add event listeners to nickname inputs to update Available Functions in real-time
        const nicknameInputs = document.querySelectorAll('input[name^="nickname_slot_"]');
        nicknameInputs.forEach(input => {
            input.addEventListener('input', (e) => {
                const slotId = e.target.name.split('_').pop(); // e.g., '1' from 'nickname_slot_1'
                const availableFunc = availableFunctions.querySelector(`.available-function[data-slot-id="slot_${slotId}"]`);
                if (availableFunc) {
                    const newNickname = e.target.value.trim();
                    availableFunc.textContent = newNickname !== '' ? newNickname : `Slot${slotId}`;
                }
            });
        });

        // Initial Setup based on existing model_order or default to selected inferences
        const initialInference = parseInt(inferenceInput.value) || 18;
        updateSlots(initialInference);
    });
</script>
{% endblock %}

│   │   ├── start_conversation.html
<!-- app/templates/conversation/start_conversation.html -->
{% extends "base.html" %}

{% block content %}
<div class="container my-4">
    <!-- Breadcrumb Navigation -->
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="{{ url_for('main.dashboard') }}">Dashboard</a></li>
            <li class="breadcrumb-item"><a href="{{ url_for('conversation_bp.conversation_list') }}">Conversations</a></li>
            <li class="breadcrumb-item active" aria-current="page">Start New Conversation</li>
        </ol>
    </nav>

    <h2>Start New Conversation</h2>
    <form method="POST" action="{{ url_for('conversation_bp.start_conversation') }}">
        {{ form.hidden_tag() }}

        <div class="mb-3">
            {{ form.title.label(class="form-label") }}
            {{ form.title(class="form-control", placeholder="Enter conversation title") }}
            {% for error in form.title.errors %}
                <div class="text-danger">{{ error }}</div>
            {% endfor %}
        </div>

        <div class="mb-3">
            {{ form.message.label(class="form-label") }}
            {{ form.message(class="form-control", placeholder="Enter initial message", rows="5") }}
            {% for error in form.message.errors %}
                <div class="text-danger">{{ error }}</div>
            {% endfor %}
        </div>

        <button type="submit" class="btn btn-primary">{{ form.submit.label.text }}</button>
        <a href="{{ url_for('conversation_bp.conversation_list') }}" class="btn btn-secondary ms-2">Cancel</a>
    </form>
</div>
{% endblock %}

│   │   ├── upload_model.html
<!-- app/templates/upload_model.html -->
{% extends "base.html" %}
{% block content %}
<div class="row justify-content-center">
    <div class="col-md-6">
        <h2>Upload Custom Model</h2>
        <form method="POST" action="{{ url_for('main.upload_model') }}" enctype="multipart/form-data">
            <div class="mb-3">
                <label for="model_name" class="form-label">Model Name:</label>
                <input type="text" class="form-control" id="model_name" name="model_name" placeholder="Enter a name for your model" required>
                {% for error in form.model_name.errors %}
                    <small class="text-danger">{{ error }}</small>
                {% endfor %}
            </div>
            <div class="mb-3">
                <label for="model_description" class="form-label">Model Description:</label>
                <textarea class="form-control" id="model_description" name="model_description" rows="3" placeholder="Enter a description for your model"></textarea>
                {% for error in form.model_description.errors %}
                    <small class="text-danger">{{ error }}</small>
                {% endfor %}
            </div>
            <div class="mb-3">
                <label for="model_file" class="form-label">Upload Model File:</label>
                <input type="file" class="form-control" id="model_file" name="model_file" accept=".json,.yaml,.yml" required>
                <div class="form-text">Allowed file types: json, yaml, yml.</div>
                {% for error in form.model_file.errors %}
                    <small class="text-danger">{{ error }}</small>
                {% endfor %}
            </div>
            <button type="submit" class="btn btn-primary">Upload Model</button>
        </form>
    </div>
</div>
{% endblock %}

│   │   ├── view_configuration.html
<!-- app/templates/view_configuration.html -->
{% extends "base.html" %}

{% block content %}
<div class="container my-4">
    <!-- Breadcrumb Navigation -->
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="{{ url_for('main.dashboard') }}">Dashboard</a></li>
            <li class="breadcrumb-item active" aria-current="page">View Configuration</li>
        </ol>
    </nav>

    <!-- Configuration Details Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Configuration Details</h2>
        <div>
            <a href="{{ url_for('main.edit_configuration', config_id=configuration.id) }}" class="btn btn-primary me-2" title="Edit Configuration">
                <i class="bi bi-pencil-square"></i> Edit
            </a>
            <form action="{{ url_for('main.delete_configuration', config_id=configuration.id) }}" method="POST" class="d-inline" onsubmit="return confirm('Are you sure you want to delete this configuration?');">
                {{ csrf_token() }}
                <button type="submit" class="btn btn-danger" title="Delete Configuration">
                    <i class="bi bi-trash"></i> Delete
                </button>
            </form>
        </div>
    </div>

    <!-- Configuration Details Card -->
    <div class="card mb-4">
        <div class="card-header bg-secondary text-white">
            <h5 class="card-title mb-0">{{ configuration.name }}</h5>
        </div>
        <div class="card-body">
            <p><strong>Inference Count:</strong> {{ configuration.inference_count }}</p>
            <p><strong>Created At:</strong> {{ configuration.created_at.strftime('%Y-%m-%d %H:%M') }}</p>
            <!-- Add more configuration attributes as needed -->
            {% if configuration.description %}
                <p><strong>Description:</strong> {{ configuration.description }}</p>
            {% endif %}
            <!-- Example of additional data -->
            {% if configuration.additional_info %}
                <p><strong>Additional Information:</strong> {{ configuration.additional_info }}</p>
            {% endif %}
        </div>
    </div>

    <!-- Model Order Details -->
    <div class="card mb-4">
        <div class="card-header bg-info text-white">
            <h5 class="card-title mb-0">Model Order</h5>
        </div>
        <div class="card-body">
            {% if model_order %}
                <ol>
                    {% for idx, slot in enumerate(model_order, start=1) %}
                        <li>{{ slot }}</li>
                    {% endfor %}
                </ol>
            {% else %}
                <p>No model order specified.</p>
            {% endif %}
        </div>
    </div>

    <!-- Associated Models (Optional) -->
    <div class="card mb-4">
        <div class="card-header bg-success text-white">
            <h5 class="card-title mb-0">Associated Models</h5>
        </div>
        <div class="card-body">
            {% if configuration.associated_models %}
                <ul class="list-group list-group-flush">
                    {% for model in configuration.associated_models %}
                        <li class="list-group-item">
                            <strong>{{ model.name }}</strong>: {{ model.description }}
                        </li>
                    {% endfor %}
                </ul>
            {% else %}
                <p>No models associated with this configuration.</p>
            {% endif %}
        </div>
    </div>

    <!-- Related Conversations (Optional) -->
    <div class="card mb-4">
        <div class="card-header bg-warning text-white">
            <h5 class="card-title mb-0">Related Conversations</h5>
        </div>
        <div class="card-body">
            {% if configuration.conversations %}
                <ul class="list-group list-group-flush">
                    {% for convo in configuration.conversations %}
                        <li class="list-group-item">
                            <a href="{{ url_for('conversation_bp.view_conversation', convo_id=convo.id) }}">{{ convo.title }}</a> - Last updated at {{ convo.updated_at.strftime('%Y-%m-%d %H:%M') }}
                        </li>
                    {% endfor %}
                </ul>
            {% else %}
                <p>No conversations related to this configuration.</p>
            {% endif %}
        </div>
    </div>

    <!-- Action Buttons -->
    <div class="d-flex justify-content-between">
        <a href="{{ url_for('main.dashboard') }}" class="btn btn-secondary">
            <i class="bi bi-arrow-left"></i> Back to Dashboard
        </a>
        <a href="{{ url_for('main.setup') }}" class="btn btn-primary">
            <i class="bi bi-plus-circle"></i> Create New Configuration
        </a>
    </div>
</div>
{% endblock %}

│   ├── static/
│   │   ├── css/
|   │   │   ├── styles.css
/* app/static/css/styles.css */

/* Dark mode styling */
body {
    background-color: #121212;
    color: #ffffff;
}

/* Purple header styling */
.bg-purple {
    background-color: #6a0dad !important;
}

a {
    color: #bb86fc;
}

a:hover {
    color: #ffffff;
}

/* Scrollbar styling for conversation display */
.list-group-item {
    background-color: #1e1e1e;
    color: #ffffff;
}

.list-group-item .text-muted {
    color: #bb86fc !important;
}

/* Dragging styles */
.list-group-item.dragging {
    opacity: 0.5;
}

/* Additional custom styles can be added here */

│   │   ├── js/
|   │   │   ├── scripts.js
// app/static/js/scripts.js

// Add any custom JavaScript here

// Example: Smooth scrolling for anchor links
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        document.querySelector(this.getAttribute('href')).scrollIntoView({
            behavior: 'smooth'
        });
    });
});

│   │   └── images/
│   └── extensions.py
# app/extensions.py

from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from flask_login import LoginManager
from flask_session import Session

# Initialize Flask extensions
db = SQLAlchemy()
migrate = Migrate()
login_manager = LoginManager()
session = Session()

def make_celery(app):
    celery = Celery(
        app.import_name,
        broker=app.config.get('CELERY_BROKER_URL', 'redis://localhost:6379/0'),
        backend=app.config.get('CELERY_RESULT_BACKEND', 'redis://localhost:6379/0')
    )
    celery.conf.update(app.config)
    
    class ContextTask(celery.Task):
        abstract = True

        def __call__(self, *args, **kwargs):
            with app.app_context():
                return super(ContextTask, self).__call__(*args, **kwargs)
    
    celery.Task = ContextTask
    return celery

├── migrations/
│   └── ...  # Managed by Flask-Migrate
├── logs/
│   └── symphoni.log
├── tests/
│   └── ...  # Unit and integration tests
├── requirements.txt
Flask==2.3.3
Flask-Session==0.4.0
Flask-Login==0.6.3
Flask-Migrate==4.0.4
Flask-SQLAlchemy==3.0.0
Celery==5.3.0
Werkzeug==3.0.4
python-dotenv==1.0.0
Flask-WTF==1.2.1
markupsafe==3.0.1
email-validator==1.3.1
alembic==1.13.3
amqp==5.2.0
billiard==4.2.1
cachelib==0.13.0
click-didyoumean==0.3.1
click-plugins==1.1.1
click-repl==0.3.0
dnspython==2.7.0
idna==3.10
kombu==5.4.2
Mako==1.3.6
prompt_toolkit==3.0.48
python-dateutil==2.9.0.post0
six==1.16.0
SQLAlchemy==1.4.43
typing_extensions==4.12.2
tzdata==2024.2
vine==5.1.0
wcwidth==0.2.13
WTForms==3.2.1
redis==5.1.1

├── config.py
# config.py

import os

class Config:
    SECRET_KEY = os.getenv('SECRET_KEY', '5f5afdfb5d527be1ccfd5a3b56adb2dc')
    SQLALCHEMY_DATABASE_URI = os.getenv('DATABASE_URI', 'sqlite:///symphoni.db')
    SQLALCHEMY_TRACK_MODIFICATIONS = False

    # Flask-Session Configuration
    SESSION_TYPE = 'redis'  # Or 'filesystem', 'sqlalchemy', etc.
    SESSION_PERMANENT = False
    SESSION_USE_SIGNER = True
    SESSION_COOKIE_NAME = 'symphoni_session'  # Define a unique session cookie name
    SESSION_REDIS = os.getenv('SESSION_REDIS_URL', 'redis://localhost:6379/0')

    # Celery Configuration
    CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', 'redis://localhost:6379/0')
    CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', 'redis://localhost:6379/0')

├── run.py
# run.py

from app import create_app

app = create_app()

if __name__ == '__main__':
    app.run(debug=True)

├── README.md
<managed by Matt>

└── .env
SECRET_KEY=5f5afdfb5d527be1ccfd5a3b56adb2dc
DATABASE_URL=sqlite:///instance/symphoni.db
CELERY_BROKER_URL=redis://localhost:6379/0
CELERY_RESULT_BACKEND=redis://localhost:6379/0
SESSION_REDIS_URL=redis://localhost:6379/0















